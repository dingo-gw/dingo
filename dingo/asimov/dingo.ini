{%- assign meta = production.meta -%}
{%- assign ifos = production.meta['interferometers'] | default: [] -%}
{%- assign sampler = production.meta['sampler'] | default: {} -%}
{%- assign scheduler = production.meta['scheduler'] | default: {} -%}
{%- assign likelihood = production.meta['likelihood'] | default: {} -%}
{%- assign quality = production.meta['quality'] | default: {} -%}
{%- assign priors = production.meta['priors'] -%}
{%- assign data = production.meta['data'] | default: {} -%}

################################################################################
## Calibration arguments
################################################################################

calibration-model={% if 'calibration' in data %}CubicSpline{% else %}None{% endif %}
spline-calibration-nodes=10
spline-calibration-curves=1000
spline-calibration-envelope-dict={
   {%- if 'calibration' in data -%}
      {%- for ifo in ifos -%}
         {{ifo}}:{{data['calibration'][ifo]}},
      {%- endfor -%}
   {%- endif -%}
}
calibration-correction-type=data


################################################################################
## Data generation arguments
################################################################################

trigger-time= {{ meta['event time'] }} 
{% if 'data files' in data and data['data files'] -%}
data-dict = {
    {%- for ifo in ifos if ifo in data['data files'] -%}
        {{ ifo }}:{{ data['data files'][ifo] }}{% if not loop.last %}, {% endif %}
    {%- endfor -%}
}
{% elif 'files' in data and data['files'] -%}
data-dict = {
    {%- for ifo in ifos if ifo in data['files'] -%}
        {{ ifo }}:{{ data['files'][ifo] }}{% if not loop.last %}, {% endif %}
    {%- endfor -%}
}
{% else -%}
data-dict = None
{%- endif %}
channel-dict = {
    {%- if 'channels' in data -%}
        {%- for ifo in ifos -%}
            {{ data['channels'][ifo] }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    {%- else -%}
        None
    {%- endif -%}
}
frame-type-dict = {
    {%- if 'frame types' in data -%}
        {%- for ifo in ifos -%}
            {{ ifo }}:{{ data['frame types'][ifo] }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    {%- else -%}
        None
    {%- endif -%}
}
injection-dict = None
scitoken-issuer={{ data["scitoken issuer"] | default: None }}
enforce-signal-duration={{ data["enforce signal duration"] | default: False }}


################################################################################
## Detector and Likelihood arguments
################################################################################

detectors={{ ifos }}
psd-length = {{data["psd length"] | default: 128 }}
psd-dict = {%- if production.psds -%}{ {%- for ifo in ifos -%}{{ifo}}:{{production.psds[ifo]}},{%- endfor -%} }{%- else -%}None{%- endif %}
{% if likelihood contains 'sample rate' -%}
sampling-frequency = {{ likelihood['sample rate'] }}
{% elsif data contains 'sample rate' -%}
sampling-frequency = {{ data['sample rate'] }}
{%- endif %}
{%- if quality contains 'minimum frequency' -%}
minimum-frequency={
   {%- for ifo in ifos -%}
      {{ifo}}:{{ quality['minimum frequency'][ifo] }}{%- if not loop.last -%}, {% endif %}
   {%- endfor -%}
}
{%- endif %}
{% if quality contains 'maximum frequency' -%}
maximum-frequency={
   {%- for ifo in ifos -%}
      {{ifo}}:{{ quality['maximum frequency'][ifo] }}{%- if not loop.last -%}, {% endif %}
   {%- endfor -%}
}
{%- endif %}
tukey-roll-off={{ likelihood['roll off time'] | default: 1.0 }}

################################################################################
##  Job submission arguments
################################################################################

accounting = {{ scheduler["accounting group"] }} 
accounting-user = {{ scheduler["accounting user"] | default: None }}
label={{ production.name }} 
local = False
generation-pool={{ scheduler["generation pool"] | default: 'local' }}
outdir={{ production.rundir }} 
request-disk={{scheduler["request disk"] | default: 8}}
request-memory={{scheduler["request memory"] | default: 500 }}
n-parallel= {{ scheduler["n parallel"] | default: 5 }}
request-cpus-importance-sampling = {{ scheduler["request cpus importance sampling"] | default: 64}}
sampling-requirements = [
   {%- if 'CUDAGlobalMemoryMb' in scheduler -%}
      (TARGET.CUDAGlobalMemoryMb >= {{ scheduler['CUDAGlobalMemoryMb'] }})
   {%- elsif 'GPUs_GlobalMemoryMb' in scheduler -%}
      (TARGET.GPUs_GlobalMemoryMb >= {{ scheduler['GPUs_GlobalMemoryMb'] }})
   {%- endif -%}
   {%- if 'GPUs_DriverVersion' in scheduler %} && (TARGET.GPUs_DriverVersion >= {{ scheduler['GPUs_DriverVersion'] }})
   {%- endif -%}
]
simple-submission = False

################################################################################
##  Sampler arguments
################################################################################

model = {{ meta['networks']['model']}}
model-init = {{ meta['networks']['model init']}}
recover-log-prob = true
device = 'cuda'
num-gnpe-iterations = {{ sampler["num gnpe iterations"] | default: 30 }}
num-samples = {{ sampler["num samples"] | default: 500000 }}
batch-size = {{ sampler["batch size"] | default: 50000 }}

################################################################################
## Prior arguments
################################################################################

{% if meta contains "priors" %}
prior-dict-updates = {
{%- if priors.keys() contains "geocentric time" %}
{%- assign p = priors['geocentric time'] %}
   geocent_time = {{p['type']}}(name="geocent_time", minimum={{p['minimum']}}, maximum={{p['maximum']}}, boundary={{p['boundary'] | default: None}}),
{% endif %}
{%- if priors.keys() contains "chirp mass" %}{% assign p = priors['chirp mass'] %}{% else %}{% assign p = None %}{% endif %}
   chirp_mass = {{p['type'] | default: "bilby.gw.prior.UniformInComponentsChirpMass" }}(name='chirp_mass', minimum={{p['minimum'] | default: 1}}, maximum={{p['maximum'] | default: 100}}, unit='$M_\{\{\odot\}\}$'),
{%- if priors.keys() contains "mass ratio" %}{% assign p = priors['mass ratio'] %}{% else %}{% assign p = None %}{% endif %}
   mass_ratio = {{p['type'] | default: "bilby.gw.prior.UniformInComponentsMassRatio" }}(name='mass_ratio', minimum={{p['minimum']}}, maximum={{p['maximum']}}),
{%- if priors.keys() contains "total mass" %}{% assign p = priors['total mass'] %}
   total_mass = {{p['type'] | default: Constraint}}(name='total_mass', minimum={{p['minimum']}}, maximum={{p['maximum']}}),{% endif %}
{%- if priors.keys() contains "mass 1" %}{% assign p = priors['mass 1'] %}{% else %}{% assign p = None %}{% endif %}
   mass_1 = {{p['type'] | default: Constraint}}(name='mass_1', minimum={{p['minimum'] | default: 1}}, maximum={{p['maximum'] | default: 1000}}),
{%- if priors.keys() contains "mass 2" %}{% assign p = priors['mass 2'] %}{% else %}{% assign p = None %}{% endif %}
   mass_2 = {{p['type'] | default: Constraint}}(name='mass_2', minimum={{p['minimum'] | default: 1 }}, maximum={{p['maximum'] | default: 1000}}),
{%- if priors.keys() contains "chi 1" %}
{%- assign p = priors['chi 1'] %}
{%- if p.keys() contains "a_prior" %}{% assign a = p['a_prior'] %}{% else %}{% assign a = None %}{% endif %}
{%- if p.keys() contains "z_prior" %}{% assign z = p['z_prior'] %}{% else %}{% assign z = None %}{% endif %}
   chi_1 = {{ p['type'] | default: "bilby.gw.prior.AlignedSpin" }}({% if a != None %}a_prior={{ a['type'] | default: "Uniform" }}(minimum={{ a['minimum'] }}, maximum={{ a['maximum'] }}){% endif %}{% if z != None %}{% if a != None %}, {% endif %}z_prior={{ z['type'] | default: "Uniform" }}(minimum={{ z['minimum'] }}, maximum={{ z['maximum'] }}){% endif %}{% if p['name'] %}, name='{{ p['name'] }}'{% else %}, name='chi_1'{% endif %}{% if p['minimum'] != nil %}, minimum={{ p['minimum'] }}{% endif %}{% if p['maximum'] != nil %}, maximum={{ p['maximum'] }}{% endif %}),
{%- endif %}
{%- if priors.keys() contains "chi 2" %}
{%- assign p = priors['chi 2'] %}
{%- if p.keys() contains "a_prior" %}{% assign a = p['a_prior'] %}{% else %}{% assign a = None %}{% endif %}
{%- if p.keys() contains "z_prior" %}{% assign z = p['z_prior'] %}{% else %}{% assign z = None %}{% endif %}
   chi_2 = {{ p['type'] | default: "bilby.gw.prior.AlignedSpin" }}({% if a != None %}a_prior={{ a['type'] | default: "Uniform" }}(minimum={{ a['minimum'] }}, maximum={{ a['maximum'] }}){% endif %}{% if z != None %}{% if a != None %}, {% endif %}z_prior={{ z['type'] | default: "Uniform" }}(minimum={{ z['minimum'] }}, maximum={{ z['maximum'] }}){% endif %}{% if p['name'] %}, name='{{ p['name'] }}'{% else %}, name='chi_2'{% endif %}{% if p['minimum'] != nil %}, minimum={{ p['minimum'] }}{% endif %}{% if p['maximum'] != nil %}, maximum={{ p['maximum'] }}{% endif %}),
{%- endif %}
{%- if priors.keys() contains "spin 1" %}
{%- assign p = priors['spin 1'] %}
   a_1 = {{ p['type'] }}(name='a_1'{% if p['minimum'] != nil %}, minimum={{ p['minimum'] }}{% endif %}{% if p['maximum'] != nil %}, maximum={{ p['maximum'] }}{% endif %}),
{%- endif %}
{%- if priors.keys() contains "spin 2" %}
{%- assign p = priors['spin 2'] %}
   a_2 = {{ p['type'] }}(name='a_2'{% if p['minimum'] != nil %}, minimum={{ p['minimum'] }}{% endif %}{% if p['maximum'] != nil %}, maximum={{ p['maximum'] }}{% endif %}),
{%- endif %}
{%- if priors.keys() contains "tilt 1" %}
{%- assign p = priors['tilt 1'] %}
   tilt_1 = {{ p['type'] }}(name='tilt_1', minimum={{ p['minimum'] | default: 0 }}, maximum={{ p['maximum'] | default: 'np.pi' }}, boundary={{ p['boundary'] | default: None }}),
{%- endif %}
{%- if priors.keys() contains "tilt 2" %}
{%- assign p = priors['tilt 2'] %}
   tilt_2 = {{ p['type'] }}(name='tilt_2', minimum={{ p['minimum'] | default: 0 }}, maximum={{ p['maximum'] | default: 'np.pi' }}, boundary={{ p['boundary'] | default: None }}),
{%- endif %}
{%- if priors.keys() contains "phi 12" %}
{%- assign p = priors['phi 12'] %}
   phi_12 = {{ p['type'] }}(name='phi_12', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: '2 * np.pi' }}, boundary={{p['boundary'] | default: "'periodic'"}}),
{%- endif %}
{%- if priors.keys() contains "phi jl" %}
{%- assign p = priors['phi jl'] %}
   phi_jl = {{ p['type'] }}(name='phi_jl', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: '2 * np.pi'}}, boundary={{p['boundary'] | default: "'periodic'"}}),
{%- endif %}
{%- if priors.keys() contains "lambda 1" %}
{%- assign p = priors['lambda 1'] %}
   lambda_1 = Uniform(name='lambda_1', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: 5000}}),
{%- endif %}
{%- if priors.keys() contains "lambda 2" %}{% assign p = priors['lambda 2'] %}
   lambda_2 = Uniform(name='lambda_2', minimum={{ p['minimum'] | default: 0}}, maximum={{ p['maximum'] | default: 5000}}),
{%- endif %}
{%- if priors.keys() contains "eccentricity" %}
{%- assign p = priors['eccentricity'] %}
   eccentricity = {{ p['type'] }}(name='eccentricity', minimum={{ p['minimum'] }}, maximum={{ p['maximum'] }}),
{%- endif %}
{%- if priors.keys() contains "mean_anomaly" %}
{%- assign p = priors['mean_anomaly'] %}
   mean_anomaly = {{ p['type'] }}(name='mean_anomaly', minimum={{ p['minimum'] }}, maximum={{ p['maximum'] }}, boundary={{ p['boundary'] | default: 'periodic' }} ),
{%- endif %}
{%- if priors.keys() contains "luminosity distance" %}
{%- assign p = priors['luminosity distance'] %}
   luminosity_distance =  {{ p['type'] | default: PowerLaw}}(name='luminosity_distance', {% for key in p.keys() %}{% if key != "type" %}{{key | replace: " ", "_"}}={{p[key]}},{% endif %} {% endfor %} unit='Mpc'),
{%- else %}
{%- assign p = None %}
   luminosity_distance =  {{ p['type'] | default: PowerLaw}}(name='luminosity_distance', unit='Mpc'),
{%- endif %}
   dec = Cosine(minimum=-np.pi, maximum=np.pi, name='dec'),
   ra = Uniform(name='ra', minimum=0, maximum=2 * np.pi, boundary='periodic'),
   theta_jn = Sine(minimum=0, maximum=np.pi, name='theta_jn'),
   psi = Uniform(name='psi', minimum=0, maximum=np.pi, boundary='periodic'),
   phase = Uniform(name='phase', minimum=0, maximum=2 * np.pi, boundary='periodic')}
{% endif %}

################################################################################
## Extra arguments
################################################################################

create-summary= {% if 'postprocessing' in meta %}{% if 'pesummary' in meta['postprocessing'] %}true{% else %}false{% endif %} {% endif %} 

################################################################################
## OSG/Environment arguments
################################################################################
osg={{ scheduler['osg'] | default: False }}
conda-env={{ meta["environment settings"]["conda env"] | default: None }}
container={{ meta["environment settings"]["container"] | default: None }}
cpu-desired-sites={{ scheduler['cpu desired sites'] | default: None }}
gpu-desired-sites={{ scheduler['gpu desired sites'] | default: None }}
transfer-files={% if scheduler['osg'] %}True{% else %}{{ scheduler['transfer files'] | default: True }}{% endif %}
environment-variables={{ scheduler['environment variables'] | default: "{'HDF5_USE_FILE_LOCKING': False, 'OMP_NUM_THREADS'=1, 'OMP_PROC_BIND'=False}" }}

################################################################################
## Plotting arguments
################################################################################
plot-corner=True
plot-weights=True
plot-log-probs=True
webdir={{ config['general']['webroot'] }}/{{ production.event.name }}/{{ production.name }}